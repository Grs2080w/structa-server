schema {
	query: Query
	mutation: Mutation
}

type Colaborators {
	id: ID!
	username: String
}

type Tasks {
	id: ID!
	name: String
	description: String
	created: String
	who_create: String
	status: String
	type: String
	assignee: String
	rating: Int
}

type WHOCREATEPROJECT {
	id: ID!
	username: String!
}

type Project {
	id: ID!
	name: String
	description: String
	created: String
	who_create: WHOCREATEPROJECT!
	status: String
	tasks: [Tasks]
	colaborators: [Colaborators]
}

type User {
	id: ID!
	username: String
	name: String
	password: String
	first_login: String!
	project_closed_count: Int!
	project_open_count: Int!
	projects_aborted_count: Int!
	avatar_url: String
	projects: [String]
}

type Token {
	data: String!
}

type StatusMessageProject {
	status: String!
}

type Query {
	listUsers: [User]
	getUser(id: ID!): User!
	usersCount: Int

	listProjects: [Project]
	getProject(id: ID!): Project!
	projectCount: Int
}

type Mutation {
	createUser(name: String!, username: String!, password: String!): User!
	deleteUser: User!
	userLogin(username: String!, password: String!): Token!
	createProject(nameProject: String!): Project!
	deleteProject(idProject: String): StatusMessageProject!
	addColaboratorToProject(idProject: String!, idColaborator: String!): StatusMessageProject!
	removeColaboratorToProject(idProject: String!, idColaborator: String!): StatusMessageProject!
	addTaskToProject(idProject: String!, name: String!, description: String!, typeOfTask: String!): Tasks!
	deleteTaskToProject(idProject: String!, idTask: String!): StatusMessageProject!
	addAssigneeToTask(idProject: String!, idTask: String!, idAssignee: String!): StatusMessageProject!
}
